//Doubly Linked List Traversals

#include<iostream>
using namespace std;

class Node{
public:
    int data;
    Node* next;
    Node* prev;
};

void forwardTraversal(Node* head){
    Node* temp = head;
    while(temp != nullptr){
        cout<< temp->data << "->";
        temp=temp->next;
    }
    cout << "null" << endl;
}

void backwardTraversal(Node* tail){
    Node* temp = tail;
    while(temp!=nullptr){
        cout<< temp->data << "->";
        temp=temp->prev;
    }
    cout << "null" << endl;
}

 int main(){
     Node* head;
     Node* tail;
     //First Node
     Node* node= new Node();
     node->data = 1;
     node->next =nullptr;
     node->prev =nullptr;
     head=node;
     tail=node;
     //Second node
     node = new Node();
     node->data = 2;
     node->next = nullptr;
     node->prev = tail;
     tail->next = node;
     tail = node;
     //Third node
     node = new Node();
     node->data = 3;
     node->next = nullptr;
     node->prev = tail;
     tail->next = node;
     tail = node;
     //Fourth node
     node = new Node();
     node->data = 4;
     node->next = nullptr;
     node->prev = tail;
     tail->next = node;
     tail = node;
     cout<< "forward traversal:";
     forwardTraversal(head);
     cout<< "backward traversal:";
     backwardTraversal(tail);
     return 0;
 }

