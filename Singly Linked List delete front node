//Singly Linked List delete front node

#include<iostream>
using namespace std;

class Node{
public:
    int data;
    Node* next; 
};

void printListElements(Node *node){
    while(node!=nullptr){
        cout << node->data << "->";
        node= node-> next;
    }
    cout << "null" << endl;
}

void insertAtFront(Node** head, int newValue) //* means pointer ** means value
{
    // Create a new node
    Node* newNode = new Node();
    newNode -> data =newValue;
    //Make the new node point to the new head 
    newNode->next = *head;
    //Make the new node the new head
    *head = newNode;
}

void insertAtTail(Node** head, int newValue){
     // Create a new node
    Node* newNode = new Node();
    newNode -> data =newValue;
    //Because it will be tail//& tail points to null
    newNode-> next =nullptr;
    //Empty List
    if(*head == nullptr){
        *head =newNode;
        return;
    }
        Node* last = *head;
        while(last-> next != nullptr){
            last =last-> next; 
        } 
        last-> next = newNode;
}

void insertAfterSpecific(Node* previous, int newValue){
    //Previous cannot be null
    if(previous==nullptr){
        cout << "Previous node cannot be null" <<endl;
        return;
    }
    //Create a new node
    Node* newNode = new Node();
    newNode -> data =newValue;
    //Cannot  break the link of previous so we point it it next
    newNode-> next= previous-> next;
    previous-> next = newNode;
}

void deleteFrontNode(Node** head ){
    //Empty list 
    if(*head== nullptr){
        cout << "Empty list, Cannot delete" << endl;
        return;
    }
    // Create a temp node to ppoint to the head
    Node* temp = *head;
    //Move the head to the next element in the list
    *head = (*head) -> next;
    //delete the temp node
    delete temp;
}

int main(){
    //Manually create a Linked List 1->2->3->null
       // Node* head=new Node();
     //head -> data = 1;
    //    Node* second=new Node();
  //      second  -> data =2;
   //     Node* third=new Node();
    //    third -> data =3;
     //   head -> next = second;
      //  second -> next = third;
    //    third -> next = nullptr;
    //    printListElements(head);
    Node* head = nullptr ;
    insertAtFront(&head,1);
    insertAtFront(&head,2);
    insertAtFront(&head,3);
    insertAtFront(&head,4);
    insertAtFront(&head,-2);
    insertAtTail(&head,5);    
    insertAtTail(&head,6);
    
    int arr[] = {7,8,9};
	int size = sizeof(arr)/ sizeof(arr[0]);

	for(int i=0;i<size;++i){
            insertAtTail(&head,arr[i]);
	}
	printListElements(head);
	insertAfterSpecific(head, 0);
	insertAfterSpecific(head, -1);	
	printListElements(head);
	insertAfterSpecific(nullptr, 100);
    cout<< "List before deletion of head:"<<endl;
    printListElements(head);
    deleteFrontNode(&head);
    cout<< "List after deletion of head:"<<endl;
    printListElements(head);
    return 0;
}
