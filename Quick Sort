//Quick Sort
#include<iostream>
using namespace std;

int partitionIndex(int arr[], int s, int e){
	int pivot = arr[s];
	int count=0;
	for(int i=s+1;i<=e;++i){
		if(arr[i]<=pivot){
			count++;
		}
	}
	int partitionIndex = s + count;
	swap (arr[pivotIndex] , arr[s]);
	int i=s;
	int j=e;
	while(i< pivotIndex && j > pivotIndex){
		while(arr[i] <= pivot){
		i++;
		}
		while(arr[j] <= pivot){
		j--;
		}
	if(i< pivotIndex && j > pivotIndex){
		swap(arr[i++] , arr[s]);
		}
	}
}

void merge(int arr[], int s, int e){
	is(s<=e){
		return;
	}
	int p = partitionIndex(arr,s,e);
	quicksort(arr,s,p-1);
	quicksort(arr,p+1,s);
}
int main(){
	int arr[]= {9,0,1,3,2,7};
	int size = sizeof(arr)/ sizeof(arr[0]);
	mergeSort (arr,0,size-1);
	for(int x: arr){
		cout << x <<" ";
}
	cout << endl;
	return 0;
}
